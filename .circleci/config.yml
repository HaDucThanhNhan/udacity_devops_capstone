version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  run-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            chmod -R +x ./bin/
            python3 -m venv venv
            source venv/bin/activate
            make install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  build-and-push-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Build and push docker image
          command: |
            export VERSION=$(<app/version.txt)
            
            # Build docker image
            docker build -t capstone-app app
            
            # Tag image
            docker tag capstone-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker tag capstone-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest
            
            # Login to docker-hub
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            
            # We publish two images with different version tags: 
            # - numbered version
            # - "latest"
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest

  deploy-infrastructure:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar curl
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator \
            https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.25.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: deploy cluster
          command: | 
            eksctl create cluster \
            --name production \ 
            --region us-west-2 \
            --nodegroup-name production \
            --nodes 2 \
            --ssh-access \
            --ssh-public-key udapeople \
            --managed

  wait-manual-approval:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - run: echo "A hold job to wait for a manual approval"

  deploy-config:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: set-credential
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: production
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: infra/cluster.yaml
          show-kubectl-command: true  
workflows:
  default:
    jobs:
      - run-lint
      - build-and-push-docker-image:
          requires: [run-lint]
      - deploy-infrastructure
      - wait-manual-approval:
          type: approval
          requires: [deploy-infrastructure]
      - deploy-config:
          requires: [wait-manual-approval]
